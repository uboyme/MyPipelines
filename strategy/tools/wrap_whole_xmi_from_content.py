
import re
# 导入 MagicDrawProjectLoader
from project.project_loader import MagicDrawProjectLoader

def wrap_whole_xmi_from_content(content: str) -> str:
    """
    if the user want to get a complete XMI string, he should call this function to wrap the content.
    Wrap the content(xmi fragement) generated by the Agent into a complete XMI string.
    This function adds the necessary XML declaration and XMI root element to the provided content.
    


    :param content: The content to be wrapped.
    :return: The complete XMI string.
    """
    print("Wrapping content into complete XMI string...")
    pattern = r"```(?:xml|xmi|uml)?\s*([\s\S]*?)\s*```"
    match = re.search(pattern, content)
    fileter_content=None
    if match:
        fileter_content=match.group(1).strip()
    else:
        fileter_content= content.strip()

    if "<xmi:XMI" in fileter_content or "<uml:Model" in fileter_content:
        print("Content already contains XMI root element, no need to wrap.")
        return f"```xml\n{fileter_content}\n```"
    
    print("Filtered content:", fileter_content)
    project_path= "config/test_project.xml"
    project_loader = MagicDrawProjectLoader(project_path)
    try:
        xmi_content=project_loader.wrap_project(fileter_content,save=False)
        print("Wrapped XMI content successfully.")
        xmi_content= f"```xml\n{xmi_content}\n```"
        return xmi_content
    except Exception as e:
        print(f"Error wrapping XMI content: {e}")
        err_info= f"Error wrapping XMI content: {e}\nPlease ensure the content is valid SysML or MBSE model content."
        return err_info
    


def export_xmi_file(xmi_content: str, file_name: str) -> str:
    """
    Export the given XMI content as a downloadable file and return the download link.

    This tool must be called when the user makes any of the following requests:

    Export the model as an XMI file,

    Obtain a download link for the XMI file.

    === Parameters ===
    :param xmi_content: Full XMI content string.
    :param file_name: Desired file name, must include".xml".

    === Returns ===
    :return: A Markdown download link for the file.
    """
    print(f"Exporting SysML model with name: {file_name}")

    # 下载目录
    download_dir = Path("sysml_downloads")
    download_dir.mkdir(parents=True, exist_ok=True)

    # 确保文件名安全
    safe_name = "".join(c for c in file_name if c.isalnum() or c in ('_', '-', '.')).rstrip('.')
    if not safe_name.endswith(".xml"):
        safe_name += ".xml"

    file_path = download_dir / safe_name

    pattern = r"```(?:xml|xmi|uml)?\s*([\s\S]*?)\s*```"
    match = re.search(pattern, xmi_content)
    fileter_content=None
    if match:
        fileter_content=match.group(1).strip()
    else:
        fileter_content= xmi_content.strip()

    if "<xmi:XMI" not in fileter_content or "<uml:Model" not in fileter_content:
        print("Content already contains XMI root element, no need to wrap.")
        return "Content does not contain valid XMI root element. Please ensure the content is a whold xmi file."

    # 写入文件
    with open(file_path, "w", encoding="utf-8") as f:
        f.write(fileter_content)

    # 生成下载链接
    url = f"http://1.94.225.216:8087/downloads/{safe_name}"
    return f"[点击下载 {safe_name}]({url})"