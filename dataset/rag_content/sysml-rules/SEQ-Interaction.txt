In SEQ models, Interaction serves as the core behavioral element of sequence diagrams, primarily used to describe the process of message exchanges between objects within a system and their temporal relationships. This element employs various internal structures and rules to precisely express behavioral constraints, timing characteristics, and message flows during interactions.

First, an Interaction contains several ownedRule elements, which typically manifest as DurationConstraint instances. These constraints limit the time intervals during which certain events or messages occur within the interaction. Each DurationConstraint associates with constrained event nodes via the constrainedElement attribute and uses a DurationInterval to specify the minimum and maximum allowable duration. Such constraints ensure that the model’s timing conforms to system design requirements by precisely defining temporal gaps between events.

Second, the Interaction includes multiple observation elements, usually of type DurationObservation, which observe and record the duration of events. These observations reference events via the event attribute, which link to the exact time points of message sending or receiving. These observation points provide concrete measurements to support duration constraints, ensuring traceability and verifiability of timing-related rules.

Additionally, Interaction defines multiple formalGate elements, serving as formal message entry and exit points that clearly mark the boundaries for message sending and receiving within the interaction. These Gates connect and control message flows through their association with message elements, supporting clear definition of message transmission paths.

The Interaction also contains fragment elements such as MessageOccurrenceSpecification and CombinedFragment. The MessageOccurrenceSpecification marks specific message send or receive events and associates with corresponding covered regions on lifelines. The CombinedFragment expresses complex control structures by specifying an interactionOperator (e.g., the “par” operator for parallel execution), enabling semantic representation of concurrency, choice, loops, and other control flows. Inside CombinedFragments, multiple InteractionOperand elements further subdivide interaction paths and conditions and can nest StateInvariant constraints to ensure that certain state properties hold valid at specific moments during the interaction.

Regarding lifelines, these represent the objects or roles participating in the interaction. The Interaction explicitly identifies participants and their active scopes via lifelines. Each lifeline is associated with the interaction fragments it covers through coveredBy, indicating the active intervals and message handling periods for that participant.

Messages in Interaction reflect the concrete communication content and temporal order between objects. Message properties include messageSort (denoting message type, e.g., asynchronous signal), sendEvent, and receiveEvent, which specify the exact sending and receiving time points, thus guaranteeing the completeness and logical sequence of message flows.

In summary, the modeling rules for Interaction in SEQ emphasize a comprehensive and precise description of system temporal interaction behaviors and timing constraints. This is achieved through the integrated use of duration constraints, duration observations, formal message gates, message occurrence specifications, combined fragments, lifelines, and message elements. These rules not only facilitate clear behavioral expression but also provide a solid foundation for model verification, analysis, and simulation.

